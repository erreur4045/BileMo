nelmio_api_doc:
    areas: # to filter documented areas
        path_patterns:
            - ^/api(?!/doc$) # Accepts routes under /api except /api/doc
    documentation:
        info:
            title: BileMo API Documentation
            description: API Projet 7
            version: 1.0.0
        securityDefinitions:
            Bearer:
                type: apiKey
                description: 'Value: Bearer {jwt}'
                name: Authorization
                in: header

        paths:
#########################################
################ General ################
#########################################
            /api/doc.json:
                get:
                    summary: Return documentation on json format
                    description: "Return documentation"
                    tags:
                        - General
                    responses:
                        200:
                            description: 'Success'
                            content:
                                application/json:
                        405:
                            description: 'Method Not Allowed'
                            content:
                                application/json:
                            examples:
                                value: 
                                    {"message":"No route found for \u0022PATCH \/api\/doc.json\u0022: Method Not Allowed (Allow: GET)","code":405}
            /api/login_check:
                post:
                    summary: Allows to retrieve a valid token
                    tags:
                        - General
                    description: "This api allows to login on platform, and return a valid token"
                    parameters:
                        - in: "body"
                          name: "body"
                          schema:
                            properties:
                                username:
                                    type: "string"
                                    description: "Yours Username"
                                    example: "Darty"
                                password:
                                    type: "string"
                                    description: "Yours Password"
                                    example: "123456"
                    responses:
                        200:
                            description: 'Success'
                            content:
                                application/json:
                            examples:
                                    value:
                                        {"token":"eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE1ODE4ODI0MzUsImV4cCI6MTYzMTg4MjQzNSwicm9sZXMiOlsiUk9MRV9VU0VSIl0sInVzZXJuYW1lIjoiZGFydHkifQ._JenTzrcQl8Wg2hNjZXyuxNbRhkN-I47amJcGEUcmxVpz6jGAbfPgmK6OdciO-fH2NI6dUt4uf0VxZGmcvbjXnPZiSOr-Z1FR5XeC0-siW-Govu4IJHtQd_6VT7XLZDOv9PTlN_gTU_UDC-r4JDMm6-xOoVX46eyT_IGUtCtmZDcv_bENul80Xs2C70MsNi7ETjz9-gp_j1HAgEKU62mX6uisKPE-QPqUkBACw1jDLE9yUVHjlkmYga-vhZ8bpv0UrwJymdEYjT38kkdJuDZ1wcWVovst5dpB820hK8HvRGp2_Yo642g7Bhvk-v-QDxZz52BLHfG4NitmhzKeWzyAWAlESy4VqwOeImY7ummvmg2nS5QJXQgJ1YpnYKazebHsWB98gCGHjLGj2-5ewI15wokz6MaQejQWpTmTsduEWqxxhwgmvkPtNAMfDtarBkYWXC34cvCk3jKuVHrUxli0VcBRHYEbh6bzasoDhUUQSgoI8a2VI767g9l4SHhT66aiZpA9CTOptB0RPN4B_UqWqKOdD509JBhDsHqP1TYjfASji9oMQ6hDs66L1_LAsJiJfTTObK-V74K2vMhF7uVIsUcK0Jx8RTGC5F4Q4ibC02NXWxq6G-yWLSKEa0wj_TpoBE0Jp2IG4CaCq2aoVvos3YAfKFJR-atY4WZNTNbs3A"}
                        400:
                            description: 'Bad Request'
                            content:
                                application/json:
                            examples:
                                username missing:
                                    {"Error":"The key \u0022username\u0022 must be provided."}
                                password missing:
                                    {"Error":"The key \u0022password\u0022 must be provided."}
                                other:
                                    {"Error":"Invalid JSON."}
                        401:
                            description: 'Unauthorized'
                            content:
                                application/json:
                            examples:
                                value:
                                    {"code":401,"message":"Invalid credentials."}
                        404:
                            description: 'Not found'
                            content:
                                application/json:
                            examples:
                                value:
                                    {"message":"No content, request seems empty or header Content-Type missing","code":404}
########################################
################ Phones ################
########################################
            /api/phones:
                get:
                    security:
                        -   Bearer: []
                    summary: Return all phones
                    tags:
                        - About Phones
                    description: Auto generated using Swagger Inspector
                    responses:
                        200:
                            description: 'Success: Return list of all phones with paginate if nessesary'
                            content:
                                application/json:
                            schema:
                                $ref: "#/definitions/PhoneOut"
                        400:
                            description: 'Bad Request'
                            content:
                                application/json:
                            examples:
                                paginate:
                                    {"message":"The requested page does not exist, last page is api\/phones?page=XX","code":400}
                        401:
                            description: 'Unauthorized, JWT Token not found'
                            content:
                                application/json:
                            examples:
                                token missing:
                                    {"code":401,"message":"JWT Token not found"}
                                token invalid:
                                    {"code":401,"message":"Invalid JWT Token"}
                                token expired:
                                    {"code":401,"message":"Expired JWT Token"}
                        405:
                            description: 'Method Not Allowed'
                            content:
                                application/json:
                            examples:
                                value:
                                    {"message":"No route found for \u0022POST \/api\/phones\u0022: Method Not Allowed (Allow: GET)","code":405}
            /api/phones/{id}:
                get:
                    security:
                        - Bearer: []
                    tags:
                        - About Phones
                    summary: "Find phone by ID"
                    description: "Returns a single phone"
                    operationId: "getPhoneById"
                    produces:
                        - "application/json"
                    parameters:
                        - name: "id"
                          in: "path"
                          description: "ID of phone to return"
                          required: true
                          type: "integer"
                    responses:
                        200:
                            description: "Successful"
                            content:
                                application/json:
                            schema:
                                $ref: "#/definitions/PhoneDetailsOut"
                        401:
                            description: 'Unauthorized, JWT Token not found'
                            content:
                                application/json:
                            examples:
                                token missing:
                                    {"code":401,"message":"JWT Token not found"}
                                token invalid:
                                    {"code":401,"message":"Invalid JWT Token"}
                                token expired:
                                    {"code":401,"message":"Expired JWT Token"}
                        404:
                            description: "Phone not found"
                            content:
                                application/json:
                            examples:
                                value:
                                    {"message":"Phone was not found, check your request","code":404}
                        405:
                            description: 'Method Not Allowed'
                            content:
                                application/json:
                            examples:
                                value:
                                    {"message":"No route found for \u0022PUT \/api\/phones\/133\u0022: Method Not Allowed (Allow: GET)","code":405}
#######################################
################ Users ################
#######################################
            /api/clients/{client_id}/users:
                get:
                    security:
                        -   Bearer: []
                    summary: "Allows you to retrieve all users."
                    tags:
                        - About Users
                    description: "Allows you to retrieve all users with paginate if nessesary."
                    parameters:
                        - name: "client_id"
                          in: "path"
                          description: "ID of client"
                          required: true
                          type: "integer"
                    responses:
                        200:
                            description: "Success: Return list of all users"
                            content:
                                application/json:
                            schema:
                                type: "object"
                                $ref: "#/definitions/UsersListOut"
                        400:
                            description: 'Bad Request'
                            content:
                                application/json:
                            examples:
                                paginate:
                                    {"message":"The requested page does not exist, last page is \/api\/clients\/74\/users?page=4","code":400}
                        401:
                            description: 'Unauthorized, JWT Token not found'
                            content:
                                application/json:
                            examples:
                                token missing:
                                    {"code":401,"message":"JWT Token not found"}
                                token invalid:
                                    {"code":401,"message":"Invalid JWT Token"}
                                token expired:
                                    {"code":401,"message":"Expired JWT Token"}
                                permission:
                                    {"message":"You can\u0027t access these resources.","code":401}
                        405:
                            description: 'Method Not Allowed'
                            content:
                                application/json:
                            examples:
                                value:
                                    {"message":"No route found for \u0022COPY \/api\/clients\/74\/users\u0022: Method Not Allowed (Allow: GET, POST)","code":405}
                post:
                    security:
                        -   Bearer: []
                    summary: "Allows you to post a new user."
                    tags:
                        - About Users
                    description: "Allows you to post a new user."
                    parameters:
                        - name: "client_id"
                          in: "path"
                          description: "ID of client"
                          required: true
                          type: "integer"
                        - in: "body"
                          name: "body"
                          schema:
                                properties:
                                    lastname:
                                        type: "string"
                                        description: "The lastname of new user"
                                        example: "Dudu"
                                    fistname:
                                        type: "string"
                                        description: "The firstname of new user"
                                        example: "Pierre"
                                    email:
                                        type: "string"
                                        description: "The email of new user"
                                        example: "pierre.dupont@localhost.com"
                    responses:
                        201:
                            description: "Success"
                            content:
                                application/json:
                            schema:
                                example: 
                                    {"url":"\/api\/clients\/XX\/users\/XXX"}
                        400:
                            description: 'Bad Request'
                            content:
                                application/json:
                            examples:
                                propertie(s) missing:
                                    {"message":{"errors":["lastname =\u003E This value should not be blank.","fistname =\u003E This value should not be blank.","email =\u003E This value should not be blank."]},"code":400}
                                email format:
                                    {"message":{"errors":["email =\u003E The email \u0027\u0022test\u0022\u0027 is not a valid email."]},"code":400}
                        401:
                            description: 'Unauthorized, JWT Token not found'
                            content:
                                application/json:
                            examples:
                                token missing:
                                    {"code":401,"message":"JWT Token not found"}
                                token invalid:
                                    {"code":401,"message":"Invalid JWT Token"}
                                token expired:
                                    {"code":401,"message":"Expired JWT Token"}
                        405:
                            description: 'Method Not Allowed'
                            content:
                                application/json:
                            examples:
                                value:
                                    {"message":"No route found for \u0022PUT \/api\/clients\/dfsf\/users\u0022: Method Not Allowed (Allow: GET, POST)","code":405}
                        409:
                            description: 'Conflict'
                            content:
                                application/json:
                            examples:
                                email already exists:
                                    {"message":"This email already exists for another user, please change it.","code":409}
            /api/clients/{client_id}/users/{id}:
                get:
                    security:
                        -   Bearer: []
                    summary: "Allows you to retrieve a single user."
                    tags:
                        - About Users
                    description: "Allows you to retrieve a single user."
                    parameters:
                        - name: "client_id"
                          in: "path"
                          description: "ID of client"
                          required: true
                          type: "integer"
                        - name: "id"
                          in: "path"
                          description: "ID of user"
                          required: true
                          type: "integer"
                    responses:
                        200:
                            description: "Success"
                            content:
                                application/json:
                            schema:
                                type: "object"
                                $ref: "#/definitions/UserOut"
                        400:
                            description: 'Bad Request'
                            content:
                                application/json:
                            examples:
                                query:
                                    {"message":"The parameter is not valid, a value of type int is requested.","code":400}
                        401:
                            description: 'Unauthorized, JWT Token not found'
                            content:
                                application/json:
                            examples:
                                token missing:
                                    {"code":401,"message":"JWT Token not found"}
                                token invalid:
                                    {"code":401,"message":"Invalid JWT Token"}
                                token expired:
                                    {"code":401,"message":"Expired JWT Token"}
                                permission:
                                    {"message":"You can\u0027t access these resources.","code":401}
                        404:
                            description: "User not found"
                            content:
                                application/json:
                            examples:
                                value:
                                    {"message":"User was not found, check your request","code":404}
                        405:
                            description: 'Method Not Allowed'
                            content:
                                application/json:
                            examples:
                                value:
                                    {"message":"No route found for \u0022PUT \/api\/clients\/74\/users\/774\u0022: Method Not Allowed (Allow: DELETE, GET)","code":405}
                delete:
                    security:
                        -   Bearer: []
                    summary: "Allows you to delete a user."
                    tags:
                        - About Users
                    description: "Allows you to delete a user."
                    parameters:
                        - name: "client_id"
                          in: "path"
                          description: "ID of client"
                          required: true
                          type: "integer"
                        - name: "id"
                          in: "path"
                          description: "ID of user"
                          required: true
                          type: "integer"
                    responses:
                        204:
                            description: "User was deleted successfully."
                        400:
                            description: "Bad Request"
                            content:
                                application/json:
                            examples:
                                query:
                                    {"message":"The parameter is not valid, a value of type int is requested.","code":400}
                                value:
                                    {"message":"User was not found, check your request","code":404}
                        401:
                            description: 'Unauthorized, JWT Token not found'
                            content:
                                application/json:
                            examples:
                                token missing:
                                    {"code":401,"message":"JWT Token not found"}
                                token invalid:
                                    {"code":401,"message":"Invalid JWT Token"}
                                token expired:
                                    {"code":401,"message":"Expired JWT Token"}
                                unauthorized:
                                    {"message":"You don\u0027t have the permissions for this resource.","code":401}
                        404:
                            description: "User not found"
                            content:
                                application/json:
                            examples:
                                value:
                                    {"message":"User was not found, check your request","code":404}
                        405:
                            description: 'Method Not Allowed'
                            content:
                                application/json:
                            examples:
                                value:
                                    {"message":"No route found for \u0022PUT \/api\/clients\/76\/users\/773\u0022: Method Not Allowed (Allow: DELETE, GET)","code":405}
#########################################
################ Definitions ############
#########################################
        definitions:
            UsersListOut:
                type: "object"
                properties:
                    id:
                        type: "integer"
                        description: "User id"
                        example: 15
                    email:
                        type: "string"
                        description: "User email value"
                        example: "jmarques@hubert.com"
                    links:
                        type: "json"
                        description: "hypermedia"
                        example: {"self":"\/api\/users","posts":"\/api\/users","delete":"\/api\/users\/15","details":"\/api\/users\/15"}
            UserOut:
                type: "object"
                properties:
                    id:
                        type: "integer"
                        description: "User id"
                        example: 15
                    email:
                        type: "string"
                        description: "User email value"
                        example: "jmarques@hubert.com"
                    lastname:
                        type: "string"
                        description: "Lastname of user"
                        example: "Jean-Luc"
                    fistname:
                        type: "string"
                        description: "Firstname of user"
                        example: "Dudu"
                    links:
                        type: "json"
                        description: "hypermedia"
                        example: {"self":"\/api\/users\/15","posts":"\/api\/users","delete":"\/api\/users\/15"}
            PhoneOut:
                type: "object"
                properties:
                    id:
                        type: "integer"
                        description: "id of Phone"
                        example: 89
                    name:
                        type: "string"
                        description: "Phone commercial name"
                        example: "P8"
                    weight:
                        type: "integer"
                        description: "Phone weight in grams"
                        example: 120
                    height:
                        type: "integer"
                        description: "Phone height in millimeter"
                        example: 120
                    width:
                        type: "integer"
                        description: "Phone width in millimeter"
                        example: 180
                    depth:
                        type: "integer"
                        description: "Phone depth millimeter"
                        example: 4
                    price:
                        type: "integer"
                        description: "Phone price in euro"
                        example: 899
                    supplier:
                        $ref: "#/definitions/Supplier"
                    links:
                        type: "json"
                        description: "hypermedia"
                        example: {"self":"\/api\/phones","details":"\/api\/phones\/89"}
            PhoneDetailsOut:
                type: "object"
                properties:
                    name:
                        type: "string"
                        description: "Phone commercial name"
                        example: "P8"
                    weight:
                        type: "integer"
                        description: "Phone weight in grams"
                        example: 120
                    height:
                        type: "integer"
                        description: "Phone height in millimeter"
                        example: 120
                    width:
                        type: "integer"
                        description: "Phone width in millimeter"
                        example: 180
                    depth:
                        type: "integer"
                        description: "Phone depth millimeter"
                        example: 4
                    price:
                        type: "integer"
                        description: "Phone price in euro"
                        example: 899
                    supplier:
                        $ref: "#/definitions/Supplier"
                    specification:
                        $ref: "#/definitions/Specification"
                    links:
                        type: "json"
                        description: "hypermedia"
                        example: {"self":"\/api\/phones\/93","list":"\/api\/phones"}
            Supplier:
                type: "object"
                properties:
                    name:
                        type: "string"
                        description: "The name of the company"
                        example: "honor"
                    country:
                        type: "string"
                        description: "The country of supplier"
                        example: "china"
            Specification:
                type: "object"
                properties:
                    screendiagonal:
                        type: "integer"
                        description: "Phone screen size in inches"
                        example: 7
                    screenresolution:
                        type: "string"
                        description: "Phone resolution"
                        example: "1080px x 720px"
                    typeofscreen:
                        type: "string"
                        description: "Display phone technology"
                        example: "Oled"
                    processor:
                        type: "string"
                        description: "Phone processor"
                        example: "Snapdragon 845"
                    ram:
                        type: "integer"
                        description: "Phone ram in Go"
                        example: 6
                    internalmemory:
                        type: "integer"
                        description: "Phone memory intern in Go"
                        example: 128
                    memorycard:
                        type: "boolean"
                        description: "The phone has a memory card capability"
                        example: 1
                    photosensor:
                        type: "integer"
                        description: "Resolution of the back camera of the phone in Mega px"
                        example: 12
                    frontphotosensor:
                        type: "integer"
                        description: "Resolution of the front camera of the phone in Mega px"
                        example: 8
                    batterycapacity:
                        type: "integer"
                        description: "Battery capacity of the phone in mAh"
                        example: 4000
                    operatingsystem:
                        type: "string"
                        description: "Os of the phone"
                        example: "Android"
                    nfc:
                        type: "boolean"
                        description: "The phone has NFC"
                        example: 0
                    dualsim:
                        type: "boolean"
                        description: "The phone has dualsim capability"
                        example: 1
                    network:
                        type: "string"
                        description: "Phone network"
                        example: "4G"
                    other:
                        type: "json"
                        description: "All other specifications you need in Json format"
                        example: {"otherValue":"Jhon","test":"value"}